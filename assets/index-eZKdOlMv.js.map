{"version":3,"file":"index-eZKdOlMv.js","sources":["../../src/kaplay.ts","../../src/entities/player.ts","../../src/scenes/level-1.ts","../../src/main.ts"],"sourcesContent":["import kaplay, {KAPLAYCtx} from 'kaplay';\n\nexport const k = kaplay({\n  global: false,\n  width: 600,\n  height: 400,\n  letterbox: true,\n  background: \"#74dcf6\",\n  crisp: true,\n  scale: 2,\n  debug: true,\n  debugKey: '`',\n  buttons: {\n    left: {\n      keyboard: [\"left\", \"a\"],\n      gamepad: [\"west\"],\n    },\n    right: {\n      keyboard: [\"right\", \"d\"],\n      gamepad: [\"east\"],\n    },\n    jump: {\n      keyboard: [\"space\", \"up\", \"w\"],\n      gamepad: [\"south\"],\n    },\n  },\n}) as  KAPLAYCtx<{}, string>;","import {Vec2} from 'kaplay';\nimport {k} from '../kaplay';\n\ntype KCtx = typeof k;\n\nexport interface PlayerConfig {\n  maxRunSpeed: number;\n  accelGround: number;\n  accelAir: number;\n  decelGround: number;\n  decelAir: number;\n  jumpForce: number;\n  minRunAnimSpeed: number;\n  maxRunAnimSpeed: number;\n}\n\nconst DEFAULTS: PlayerConfig = {\n  maxRunSpeed: 300, // px/s\n  accelGround: 300,\n  accelAir: 150,\n  decelGround: 600,\n  decelAir: 300,\n  jumpForce: 400,\n  minRunAnimSpeed: 1, // anim speed multiplier\n  maxRunAnimSpeed: 2,\n};\n\nenum AnimName {\n  idle = 'idle',\n  walk = 'walk',\n  jump = 'jump',\n  fall = 'fall',\n}\n\nk.loadSprite('player', '/sprites/characters/bobr.gif', {\n  sliceX: 5,\n  sliceY: 4,\n  anims: {\n    idle: {from: 0, to: 0},\n    walk: {from: 5, to: 8, speed: 10, loop: true}, // speed here is frames per second\n    jump: {from: 10, to: 10},\n    fall: {from: 10, to: 10},\n  },\n});\n\nexport function createPlayer(k: KCtx, posXY: Vec2 = k.vec2(100, 100), cfg?: Partial<PlayerConfig>) {\n  const C = {...DEFAULTS, ...cfg};\n\n  const player = k.add([\n    k.sprite('player', {anim: 'idle'}),\n    k.pos(posXY),\n    k.area({shape: new k.Rect(k.vec2(3, 0), 20, 31)}), // custom area shape for better collision\n    k.body(), // enables gravity + isGrounded()\n    k.anchor('bot'),\n    k.state('idle', ['idle', 'walk', 'jump', 'fall']),\n    {\n      id: 'playerCtrl',\n      vx: 0, // horizontal velocity\n      get moveDirection(): number {\n        return (k.isButtonDown('right') ? 1 : 0) +\n          (k.isButtonDown('left') ? -1 : 0);\n      },\n    },\n  ]);\n\n  k.onButtonPress(['jump'], () => {\n    // Allow jumping only if player is grounded\n    if (player.isGrounded()) {\n      doJump();\n    }\n  });\n\n  player.onUpdate(() => {\n    const dt = k.dt();\n    const onGround = player.isGrounded();\n\n    // horizontal movement\n    const direction = player.moveDirection;\n\n    if (direction !== 0) {\n      let accel = onGround ? C.accelGround : C.accelAir;\n\n      // If direction is opposite to current velocity, need to change acceleration\n      if (Math.sign(direction) !== Math.sign(player.vx)) {\n        accel += (onGround ? C.decelGround : C.decelAir); // add deceleration to acceleration\n      }\n\n      player.vx = moveTowards(player.vx, direction * C.maxRunSpeed, accel * dt);\n    } else {\n      const accel = onGround ? C.decelGround : C.decelAir;\n      const mag = Math.max(0, Math.abs(player.vx) - accel * dt);\n      player.vx = mag * Math.sign(player.vx);\n    }\n\n    // apply velocity to pos (Kaplay's body() already applies gravity to vy;\n    // vx is usually read by you / set on obj; if your Kaplay build needs a different prop, adapt here)\n    player.move(player.vx, 0);\n\n    // Set face direction based on direction of movement\n    player.flipX = direction < 0 ? true : direction > 0 ? false : player.flipX;\n    player.area.scale.x = player.flipX ? -1 : 1; // need to flip collision area as well\n\n    // animation state switches\n    if (!onGround) {\n      if (player.vel.y < 0) {\n        setAnim(AnimName.jump);\n      } else {\n        setAnim(AnimName.fall);\n      }\n    } else {\n      if (Math.abs(player.vx) > 5) {\n        setAnim(AnimName.walk);\n      } else {\n        setAnim(AnimName.idle);\n      }\n    }\n\n    // Change animation speed based on velocity\n    if (player.getCurAnim()?.name === AnimName.walk) {\n      const t = k.clamp(Math.abs(player.vx) / C.maxRunSpeed, 0, 1);\n      player.animSpeed = k.lerp(C.minRunAnimSpeed, C.maxRunAnimSpeed, t);\n    }\n  });\n\n  function doJump() {\n    player.jump(C.jumpForce);\n    setAnim(AnimName.jump);\n  }\n\n  function setAnim(name: AnimName) {\n    if (player.getCurAnim()?.name !== name) player.play(name);\n  }\n\n  return player;\n}\n\nfunction moveTowards(current: number, target: number, maxDelta: number): number {\n  const delta = target - current;\n  if (Math.abs(delta) <= maxDelta) return target;\n\n  return current + Math.sign(target) * maxDelta;\n}","import {KAPLAYCtx} from 'kaplay';\nimport {createPlayer} from '../entities/player';\n\nexport const sceneLevel1 = (k:  KAPLAYCtx) => {\n  k.setGravity(1000);\n  \n  // Create floor\n  k.add([\n    k.rect(k.width(), 20),\n    k.pos(0, k.height() - 20),\n    k.color('#9e9303' as any),\n    k.area(),\n    k.anchor('top'),\n    k.body({isStatic: true}), // static body for the ground\n  ]);\n  \n  // Add some boxes or platforms\n  k.add([\n    k.rect(100, 20),\n    k.pos(0, 340),\n    k.color('#9e9303' as any),\n    k.area(),\n    k.anchor('top'),\n    k.body({isStatic: true}),\n  ]);\n  k.add([\n    k.rect(100, 20),\n    k.pos(150, k.height() - 100),\n    k.color('#9e9303' as any),\n    k.area(),\n    k.anchor('top'),\n    k.body({isStatic: true}),\n  ]);\n  k.add([\n    k.rect(100, 20),\n    k.pos(400, k.height() - 150),\n    k.color('#9e9303' as any),\n    k.area(),\n    k.anchor('top'),\n    k.body({isStatic: true}),\n  ]);\n  \n  // load your level / tiles etc.\n  const player = createPlayer(k, k.vec2(120, 0));\n\n  // camera follow (if you want)\n  k.onUpdate(() => {\n    k.setCamPos(player.pos);\n  });\n};","import {k} from './kaplay';\nimport {sceneLevel1} from './scenes/level-1';\n\nk.scene('level-1', () => sceneLevel1(k));\n\nk.go('level-1');"],"names":["k","kaplay","DEFAULTS","createPlayer","posXY","cfg","C","player","doJump","dt","onGround","direction","accel","moveTowards","mag","setAnim","t","name","current","target","maxDelta","delta","sceneLevel1"],"mappings":"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"}